<?php

// PHP Data Model definition file

// WARNING - WARNING - WARNING
// DO NOT EDIT THIS FILE (unless you know what you are doing)
//
// If you use supply a datamodel.xxxx.xml file with your module
// the this file WILL BE overwritten by the compilation of the
// module (during the setup) if the datamodel.xxxx.xml file
// contains the definition of new classes or menus.
//
// The recommended way to define new classes (for iTop 2.0) is via the XML definition.
// This file remains in the module's template only for the cases where there is:
// - either no new class or menu defined in the XML file
// - or no XML file at all supplied by the module


class ActionSMS extends ActionNotification
{
	public static function Init()
	{
		$aParams = array
		(
			"category" => "core/cmdb,application",
			"key_type" => "autoincrement",
			"name_attcode" => "name",
			"state_attcode" => "",
			"reconc_keys" => array('name'),
			"db_table" => "priv_action_sms",
			"db_key_field" => "id",
			"db_finalclass_field" => "",
			"display_template" => "",
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();

		MetaModel::Init_AddAttribute(new AttributeEmailAddress("test_recipient", array("allowed_values"=>null, "sql"=>"test_recipient", "default_value"=>"", "is_null_allowed"=>true, "depends_on"=>array())));

		MetaModel::Init_AddAttribute(new AttributeOQL("to", array("allowed_values"=>null, "sql"=>"to", "default_value"=>null, "is_null_allowed"=>true, "depends_on"=>array())));


		MetaModel::Init_AddAttribute(new AttributeText("message", array("allowed_values"=>null, "sql"=>"message", "default_value"=>null, "is_null_allowed"=>false, "depends_on"=>array())));

		// Display lists
		MetaModel::Init_SetZListItems('details', array('name', 'description', 'to','message', 'trigger_list')); // Attributes to be displayed for the complete details
		MetaModel::Init_SetZListItems('list', array('name', 'description', 'to','message')); // Attributes to be displayed for a list
		// Search criteria
		MetaModel::Init_SetZListItems('standard_search', array('name', 'description', 'to','message')); // Criteria of the std search form
//		MetaModel::Init_SetZListItems('advanced_search', array('name')); // Criteria of the advanced search form
	}

	public function getRecieptants($sOQL, $aArgs)
	{
		if ($sOQL == '') {return null;}


		$oSearch = DBObjectSearch::FromOQL($sOQL);
		$oSearch->AllowAllData();
		$sClass = $oSearch->GetClass();
		if ($sClass != 'Person')
		{
			return null;
		}


		$oSet = new DBObjectSet($oSearch, array(), $aArgs);
		while ($oObj = $oSet->Fetch())
		{
			if ($oObj->Get('mobile_phone') !='')
			{
				$sPhone = $oObj->Get('mobile_phone');
				if (preg_match("/^(0098|98|0|\+98)([0-9]{10})\z/", $sPhone, $matches)){
					$aPhones[] = $matches[2];
				}

				$fff = fopen("test_phones.php","w");
				fwrite($fff,json_encode($aPhones));
				fclose($fff);
				
			}	
		}

		return $aPhones;

	}

	public function DoExecute($oTrigger, $aContextArgs)
	{
	if (MetaModel::IsLogEnabledNotification())
	{
	  $oLog = new EventNotificationEmail();
	  
	  $oLog->Set('userinfo', UserRights::GetUser());
	  $oLog->Set('message', 'notification pending');
	  $oLog->Set('trigger_id', $oTrigger->GetKey());
	  $oLog->Set('action_id', $this->GetKey());
	  $oLog->Set('object_id', $aContextArgs['this->object()']->GetKey());
	  // Must be inserted now so that it gets a valid id that will make the link
	  // between an eventual asynchronous task (queued) and the log
	  $oLog->DBInsertNoReload();
	}
	else
	{
	  $oLog = null;
	}

	try
	{


	  	$url = MetaModel::GetModuleSetting('suntech-sms', 'url', '');
		$parameters['username'] = MetaModel::GetModuleSetting('suntech-sms', 'username', '');
	    $parameters['password'] = MetaModel::GetModuleSetting('suntech-sms', 'password', '');
	    $parameters['from'] = MetaModel::GetModuleSetting('suntech-sms', 'from', '');
	    $parameters['to'] = $this->getRecieptants(MetaModel::ApplyParams($this->Get('to'), $aContextArgs), $aContextArgs);
	    $parameters['text'] = MetaModel::ApplyParams($this->Get('message'), $aContextArgs);
	    $parameters['isflash'] = MetaModel::GetModuleSetting('suntech-sms', 'isflash', '');
	    $parameters['udh'] = '';
	    $parameters['recId'] = '';
	    $parameters['status'] = '';

	    

	    $soapClientObj = new SoapClient($url);
	    $sRes = $soapClientObj->SendSms($parameters);

	    if ($oLog)
		  {
		    $oLog->Set('message', 'Result Code: '.(($sRes->SendSmsResult == 1)?'successful':'failed'));
			$oLog->Set('from',$parameters['from']);
			$oLog->Set('body',$parameters['text']);
			$oLog->Set('subject',$parameters['text']);
			$oLog->Set('to',json_encode($parameters['to']));
		  }


	}
	catch (Exception $e)
	{
	  if ($oLog)
	  {
	    $oLog->Set('message', 'Error: '.$e->getMessage());
	  }
	}
	if ($oLog)
	{
	  $oLog->DBUpdate();
	}
	}
}